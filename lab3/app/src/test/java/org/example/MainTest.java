/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.swing.plaf.basic.BasicSliderUI.ActionScroller;

import org.checkerframework.checker.units.qual.t;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class MainTest {
    Tile[][] map = Action.creatEmptyMap();

    @Test 
    void checkSymbolAndSound() {
    // Create Tree, Bush, and Rock objects
    Tree tree = new Tree(0, 0);
    Bush bush = new Bush(1, 1);
    Rock rock = new Rock(2, 2);
    
    // Get symbols from the objects
    String treeSymbol = tree.getSymbol();
    String bushSymbol = bush.getSymbol();
    String rockSymbol = rock.getSymbol();

    // Expected symbols
    String expectedTreeSymbol = "ðŸŒ²";
    String expectedBushSymbol = "ðŸŒ³";
    String expectedRockSymbol = "ðŸª¨ ";

    // Get sounds from the objects
    String treeSound = tree.getSound();
    String bushSound = bush.getSound();
    String rockSound = rock.getSound();

    // Expected sounds (you need to replace these with the actual expected sounds)
    String expectedTreeSound = "Rustle";
    String expectedBushSound = "Rustle";
    String expectedRockSound = "Silence";

    // Assertions for symbols
    assertEquals(expectedTreeSymbol, treeSymbol);
    assertEquals(expectedBushSymbol, bushSymbol);
    assertEquals(expectedRockSymbol, rockSymbol);

    // Assertions for sounds
    assertEquals(expectedTreeSound, treeSound);
    assertEquals(expectedBushSound, bushSound);
    assertEquals(expectedRockSound, rockSound);
        }
        
    @Test
    void checkTile() {
    Tile test = new Tile(1, 2, null);

    // Explicitly test and assert getX() and getY() methods
    assertEquals(1, test.getX(), "getX() did not return the expected value");
    assertEquals(2, test.getY(), "getY() did not return the expected value");

    // Test object-related methods
    assertNull(test.getObject());

    GameObjects cat = new Cat(test.getX(), test.getY());
    test.setObject(cat);
    assertNotNull(test.getObject());

    test.removeObject(cat);
    assertNull(test.getObject());
    }

    @Test
    void checkSetters(){
        EnvairomentalObjects tree = new Tree(0, 0);

        tree.setX(1);
        tree.setY(1);
        map[1][1].setObject(tree);
        assertNotNull(map[1][1].getObject());
        assertNull(map[0][0].getObject());

        tree.setX(3);
        tree.setY(5);

        int xNy = tree.getX();
        int yNy = tree.getY();
        map[xNy][yNy].setObject(map[1][1].getObject());

        map[1][1].removeObject(tree);

        assertNotNull(map[xNy][yNy].getObject());

        // sÃ¤tta olika vÃ¤rde pÃ¥ trÃ¤det kontrolera att det fÃ¶rÃ¤ndras
    }

    @Test
    void checkIsMovable(){
        EnvairomentalObjects tree = new Tree(5, 5);
        EnvairomentalObjects rock = new Rock(4, 4);
        EnvairomentalObjects bush = new Bush(3, 3);
        GameObjects dog = new Dog(2, 2);
        GameObjects fox = new Fox(1, 1);
        assertEquals(false, tree.isMovable());
        assertEquals(false, rock.isMovable());
        assertEquals(false, bush.isMovable());
        assertEquals(true, dog.isMovable());
        assertEquals(true, fox.isMovable());
    }
    @Test
    void testMenuDisplay() {
        // Arrange: Redirect output to capture printed menu
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PrintStream originalOut = System.out;
        System.setOut(new PrintStream(outputStream));

        // Act: Call the displayMenu method
        Main.displayMenu();

        // Capture output and reset System.out
        String actualOutput = outputStream.toString();
        System.setOut(originalOut);

        // Assert: Check that the output includes expected menu items
        assertTrue(actualOutput.contains("1. Create a \"forest\" as a 10x10 area and print it out."));
        assertTrue(actualOutput.contains("2. Insert a random object/animal with a random position."));
        assertTrue(actualOutput.contains("3. Insert 10 random object/animal with a random position, ensure that all types of objects/animals are inserted."));
        assertTrue(actualOutput.contains("4. Move an object/animal (if it supports it)."));
        assertTrue(actualOutput.contains("5. Remove an object/shape."));
        assertTrue(actualOutput.contains("6. Remove all objects/animals."));
        assertTrue(actualOutput.contains("7. Print all objects/animals in the forest."));
        assertTrue(actualOutput.contains("8. Print all details on all \"objects\", including how they sound."));
        assertTrue(actualOutput.contains("9. Print all details on all \"objects\", in a JSON format."));
        assertTrue(actualOutput.contains("10. to exit the program."));
    }

    @Test
    void testCreateForest() {
        // Simulate input for option 1 (Create forest) and exit
        String simulatedInput = "1\n10\n";
        simulateInput(simulatedInput);

        // Capture the output
        ByteArrayOutputStream outputStream = captureOutput();

        // Act: Call the main method
        String[] args = {};
        Main.main(args);

        // Get the actual output
        String actualOutput = outputStream.toString();

        // Assert the forest is created and printed
        assertTrue(actualOutput.contains("Map printed:"));
        assertTrue(actualOutput.contains("Exiting the program. Goodbye!"));
    }

    @Test
    void testInsertRandomObject() {
    // Simulate input for option 2 (Insert random object) and exit
    String simulatedInput = "1\n2\n10\n";
    simulateInput(simulatedInput);

    // Capture the output
    ByteArrayOutputStream outputStream = captureOutput();

    // Act: Call the main method
    String[] args = {};
    Main.main(args);

    // Get the actual output
    String actualOutput = outputStream.toString();

    // Print the actual output for debugging
    System.out.println("Actual Output:\n" + actualOutput);

    // Assert that a random object was inserted and printed
    assertTrue(actualOutput.contains("Random object inserted:"));  // Adjust this based on your actual output
    assertTrue(actualOutput.contains("Map printed:"));  // Adjust based on your map printing method
    assertTrue(actualOutput.contains("Exiting the program. Goodbye!"));
}

    @Test
    void testInsert10RandomObjects() {
        // Simulate input for option 3 (Insert 10 random objects) and exit
        String simulatedInput = "1\n3\n10\n";
        simulateInput(simulatedInput);

        // Capture the output
        ByteArrayOutputStream outputStream = captureOutput();

        // Act: Call the main method
        String[] args = {};
        Main.main(args);

        // Get the actual output
        String actualOutput = outputStream.toString();

        // Assert that 10 random objects were inserted and printed
        assertTrue(actualOutput.contains("10 random objects inserted:"));  
        assertTrue(actualOutput.contains("Map printed:"));
        assertTrue(actualOutput.contains("Exiting the program. Goodbye!"));
    }
    @Test
    void testMoveAnimal() {
        // Simulate input for option 4 (Move animal) and exit
        String simulatedInput = "4\n10\n";
        simulateInput(simulatedInput);

        // Capture the output
        ByteArrayOutputStream outputStream = captureOutput();

        // Act: Call the main method
        String[] args = {};
        Main.main(args);

        // Get the actual output
        String actualOutput = outputStream.toString();

        // Assert that an animal was moved and map updated
        assertTrue(actualOutput.contains("Error: The forest (map) has not been created yet. Please select option 1 first."));
        assertTrue(actualOutput.contains("Exiting the program. Goodbye!"));
    }

    @Test
    void testRemoveObject() {
        // Simulate input for option 5 (Remove object) and exit
        String simulatedInput = "5\n10\n";
        simulateInput(simulatedInput);

        // Capture the output
        ByteArrayOutputStream outputStream = captureOutput();

        // Act: Call the main method
        String[] args = {};
        Main.main(args);

        // Get the actual output
        String actualOutput = outputStream.toString();

        // Assert that an object was removed and map updated
        assertTrue(actualOutput.contains("Error: The forest (map) has not been created yet. Please select option 1 first."));
        assertTrue(actualOutput.contains("Exiting the program. Goodbye!"));
    }

    @Test
    void testRemoveAllObjects() {
        // Simulate input for option 6 (Remove all objects) and exit
        String simulatedInput = "1\n3\n6\n10\n";
        simulateInput(simulatedInput);

        // Capture the output
        ByteArrayOutputStream outputStream = captureOutput();

        // Act: Call the main method
        String[] args = {};
        Main.main(args);

        // Get the actual output
        String actualOutput = outputStream.toString();

        // Assert that all objects were removed and map updated
        assertTrue(actualOutput.contains("All object are removed"));  // Adjust this based on your actual output
        assertTrue(actualOutput.contains("Map printed:"));
        assertTrue(actualOutput.contains("Exiting the program. Goodbye!"));
    }

    @Test
    void testPrintAllObjects() {
        // Simulate input for option 7 (Print all objects) and exit
        String simulatedInput = "1\n3\n7\n10\n";
        simulateInput(simulatedInput);

        // Capture the output
        ByteArrayOutputStream outputStream = captureOutput();

        // Act: Call the main method
        String[] args = {};
        Main.main(args);

        // Get the actual output
        String actualOutput = outputStream.toString();

        // Assert that all objects are printed
        assertTrue(actualOutput.contains("Objects in the forest:"));  // Adjust this based on your actual output
        assertTrue(actualOutput.contains("Exiting the program. Goodbye!"));
    }

    @Test
    void testPrintAllDetails() {
        // Simulate input for option 8 (Print all details with sound) and exit
        String simulatedInput = "1\n3\n8\n10\n";
        simulateInput(simulatedInput);

        // Capture the output
        ByteArrayOutputStream outputStream = captureOutput();

        // Act: Call the main method
        String[] args = {};
        Main.main(args);

        // Get the actual output
        String actualOutput = outputStream.toString();

        // Assert that details and sound are printed
        assertTrue(actualOutput.contains("Details of all objects:"));  // Adjust this based on your actual output
        assertTrue(actualOutput.contains("Exiting the program. Goodbye!"));
    }

    @Test
    void testPrintAllAsJson() {
        // Simulate input for option 9 (Print all details in JSON) and exit
        String simulatedInput = "1\n3\n9\n10\n";
        simulateInput(simulatedInput);

        // Capture the output
        ByteArrayOutputStream outputStream = captureOutput();

        // Act: Call the main method
        String[] args = {};
        Main.main(args);

        // Get the actual output
        String actualOutput = outputStream.toString();

        // Assert that the objects were printed in JSON format
        assertTrue(actualOutput.contains("{"));
        assertTrue(actualOutput.contains("Exiting the program. Goodbye!"));
    }

    @Test
    void testQuitProgram() {
        // Simulate input for option 10 (Quit the program)
        String simulatedInput = "10\n";
        simulateInput(simulatedInput);

        // Capture the output
        ByteArrayOutputStream outputStream = captureOutput();

        // Act: Call the main method
        String[] args = {};
        Main.main(args);

        // Get the actual output
        String actualOutput = outputStream.toString();

        // Assert that the program quits
        assertTrue(actualOutput.contains("Exiting the program. Goodbye!"));
    }

    // Helper method to simulate user input
    private void simulateInput(String simulatedInput) {
        ByteArrayInputStream inputStream = new ByteArrayInputStream(simulatedInput.getBytes());
        System.setIn(inputStream);
    }

    // Helper method to capture system output
    private ByteArrayOutputStream captureOutput() {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outputStream));
        return outputStream;
    }

    @Test
    void checkTestError(){
        // Simulate input for option 5 (Remove object) and exit
        String simulatedInput = "7\n10\n";
        simulateInput(simulatedInput);

        // Capture the output
        ByteArrayOutputStream outputStream = captureOutput();

        // Act: Call the main method
        String[] args = {};
        Main.main(args);

        // Get the actual output
        String actualOutput = outputStream.toString();

        // Assert that an object was removed and map updated
        assertTrue(actualOutput.contains("Error: The forest (map) has not been created yet. Please select option 1 first."));
        assertTrue(actualOutput.contains("Exiting the program. Goodbye!"));

    }
    @Test
    void checkTestError2(){
        // Simulate input for option 5 (Remove object) and exit
        String simulatedInput = "8\n10\n";
        simulateInput(simulatedInput);

        // Capture the output
        ByteArrayOutputStream outputStream = captureOutput();

        // Act: Call the main method
        String[] args = {};
        Main.main(args);

        // Get the actual output
        String actualOutput = outputStream.toString();

        // Assert that an object was removed and map updated
        assertTrue(actualOutput.contains("Error: The forest (map) has not been created yet. Please select option 1 first."));
        assertTrue(actualOutput.contains("Exiting the program. Goodbye!"));
    }
    @Test
    void checkTestError3(){
        // Simulate input for option 5 (Remove object) and exit
        String simulatedInput = "2\n10\n";
        simulateInput(simulatedInput);

        // Capture the output
        ByteArrayOutputStream outputStream = captureOutput();

        // Act: Call the main method
        String[] args = {};
        Main.main(args);

        // Get the actual output
        String actualOutput = outputStream.toString();

        // Assert that an object was removed and map updated
        assertTrue(actualOutput.contains("Error: The forest (map) has not been created yet. Please select option 1 first."));
        assertTrue(actualOutput.contains("Exiting the program. Goodbye!"));

    }
}

