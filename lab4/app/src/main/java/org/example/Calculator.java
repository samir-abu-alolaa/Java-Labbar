/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.Scanner;

public class Calculator {

    // Check if expression is valid
    public Boolean validExpression(String expression) {
        // Regular expression stating expression must start and end with number and have operator in between.
        return expression.matches("^\\d+(\\s[\\+\\-\\*\\/]\\s\\d+)*$");
    }

    // Convert expression to string array
    public String[] stringToArray(String expression) {
        String[] array = expression.split(" ");
        return array;
    }

    public String getInput() {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the calculation, following this pattern (number operator number...). It must start and end with a number: ");
        String expression = scanner.nextLine();

        return expression;
    }

    public double add(double a, double b) {
        return a + b;
    }
     
    public double subtract(double a, double b) {
        return a - b;
    }

    public double multiply(double a, double b) {
        return a * b;
    }

    public double division(double a, double b) {
        return a / b;
    }

    public double divisionWithException(double a, double b) {
        if (b == 0.0) {
            throw new java.lang.ArithmeticException("Division by zero not allowed.");
        } else {
            return a / b;
        }
    } 

    public double calculateSum() {
        String[] array;
        double sum = 0;  // Initializes sum variable

        String expression = getInput();  // Get input

        if (!validExpression(expression)) { // Checks if expression is in valid format
            System.out.println("String is not in valid format");
            return Double.NaN;
        }

        array = stringToArray(expression);  // Split expression into string array
        sum += Double.parseDouble(array[0]); // Add first number in expression to sum

        // Loop through array looking specifically for operators. Formula: sum operator nextnumber
        for (int i = 1; i < array.length; i++) {
            String operator = array[i];

            switch (operator) {
                case "+":
                    sum = add(sum, Double.parseDouble(array[i + 1]));                    
                    break;
                case "-":
                    sum = subtract(sum, Double.parseDouble(array[i + 1]));
                    break;
                case "*":
                    sum = multiply(sum, Double.parseDouble(array[i + 1]));
                    break;
                case "/":
                    sum = divisionWithException(sum, Double.parseDouble(array[i + 1]));
                    break;
                default:
                    continue;
            }
        }
        return sum;
    }
}
